#!@RSCRIPT@

# The following variables are defined at configuration and build time:
# bindir     (containing RCAS)
# libexecdir (containing scripts and executables)
# basedir    (containing data files)
#:MAKE
Rscript = '@RSCRIPT@'


#preprocess the gtf/gff files to 
# 1. create GRanges object and write it to .rds file; 
# 2. create txdb file using GenomicFeatures library and write to disk 
# Author: BU 

#1. Collect arguments
args <- commandArgs(TRUE)

## Default setting when no arguments passed
if(length(args) < 3) {
  args <- c("--help")
}

help_command = "
RCAS: run RCAS pipeline for a given ENSEMBL annotation file and BED formatted input file 

Arguments:
  --gff_file=annotation.{gft,gff}     ENSEMBL GTF or GFF annotation file
  --peak_file=regions.bed             path to query regions in BED format, e.g. Hafner2009.bed
  --bed_dir=./bed_files/              location of directory of BED files
  --cores=NUMBER                      number of cores to use for parallel execution;
                                      only effective with the '--bed_dir' option.
  --genome_version=VERSION            genome version; supported values for VERSION are
                                       'hg19', 'dm3', 'ce6', and 'mm9'
  --help                              display this help text and exit

Example:
  RCAS --gff_file=/data/akalin/Base/Annotation/hg19/EnsemblGenes/142812_EnsemblFTP_hg19_EnsemblGenes.gtf \
       --genome_version=hg19   \
       --cores=5               \
       --bed_dir=./bed_files/

RCAS @VERSION@
Copyright (C) 2016 BIMSB Bioinformatics Platform.

This is free software under the Expat/MIT license: you are free to
change and redistribute it.  There is NO WARRANTY, to the extent
permitted by law.
"

## Help section
if("--help" %in% args) {
  cat(help_command, "\n")
  q(save="no")
}

## Parse arguments (we expect the form --arg=value)
parseArgs <- function(x) strsplit(sub("^--", "", x), "=")
argsDF <- as.data.frame(do.call("rbind", parseArgs(args)))
argsL <- as.list(as.character(argsDF$V2))
names(argsL) <- argsDF$V1

if(!("gff_file" %in% argsDF$V1)) {
  cat(help_command, "\n")
  stop("provide the path to gtf/gff file\n")
}

if(!("peak_file" %in% argsDF$V1) && !("bed_dir" %in% argsDF$V1)) {
  cat(help_command, "\n")
  stop("provide the path to input BED file(s) with --peak_file or --bed_dir\n")
}

if(("peak_file" %in% argsDF$V1) && ("bed_dir" %in% argsDF$V1)) {
  cat(help_command, "\n")
  stop("provide either --peak_file or --bed_dir, not both\n")
}

if(!("genome_version" %in% argsDF$V1)) {
  cat(help_command, "\n")
  stop("provide the genome version: choose between hg19, mm9, ce6 or dm3\n")
}

gff_file = argsL$gff_file
genome_version = argsL$genome_version

if(!genome_version %in% c('hg19', 'ce6', 'mm9', 'dm3')){
  cat(help_command,"\n")
  stop("Error: The supported genome versions are hg19, ce6, mm9 and dm3\n")
}

if(genome_version %in% c('hg19', 'hg38')){
  species = 'human'
}else if(genome_version %in% c('mm9', 'mm10')){
  species = 'mouse'
}else if(genome_version %in% c('ce6', 'ce10')){
  species = 'worm'
}else if(genome_version %in% c('dm3', 'dm6')){
  species = 'fly'
}


# Spawn multiple RCAS processes when --bed_dir is provided.
if(("bed_dir" %in% argsDF$V1)) {
  bed_dir = argsL$bed_dir
  cores <- if ("cores" %in% argsDF$V1) { argsL$cores } else { 2 }

  #load libraries#
  suppressMessages(library(tools))
  suppressMessages(library(foreach))
  suppressMessages(library(doParallel))

  bedfiles = list.files(path=bed_dir, pattern='*.bed', full.names = TRUE)
  workdir = getwd()

  ##register clusters for parallel executoin
  registerDoParallel(cores = cores)

  foreach (i=1:length(bedfiles)) %dopar% {
    setwd(workdir)
    f = bedfiles[i]
    f = file_path_as_absolute(f)
    base = sub(pattern = '.bed$', basename(f), replacement = '')
    cat(f, base, '\n')
    system(paste('mkdir', base))
    setwd(base)
    rcas_command = paste0(Rscript," ",bindir,"/RCAS --gff_file=",gff_file," --genome_version=",genome_version," --peak_file=",f)
    cat('workdir=',getwd(),'\n')
    cat('rcascommand',rcas_command,'\n')
    system(rcas_command)
  }
  exit(0)
}


# Single file operations follow.

#load libraries#
suppressMessages(library('tools'))
suppressMessages(library('rtracklayer'))
suppressMessages(library('GenomicFeatures'))

peak_file = argsL$peak_file

out_prefix = sub(x = basename(peak_file), pattern = paste0('.',file_ext(peak_file)), replacement = '')

gff_version = file_ext(gff_file)

if(file.exists(paste0(gff_file, ".granges.rds")))
{
  cat('Reading existing granges.rds object\n')
  gff = readRDS(paste0(gff_file, ".granges.rds"))
}else {
  if (gff_version == 'gtf'){
    cat('importing gtf file\n')
    gff = import.gff(gff_file)
  }else if (gff_version == 'gff3'){
    cat('importing gff3 file\n')
    gff = import.gff3(gff_file)
  }else{
    stop('Only gtf and gff3 file extensions are allowed\n')
  } 
  #convert seqlevelsStyle to 'UCSC" 
  seqlevelsStyle(gff) = 'UCSC'
  gff = keepStandardChromosomes(gff)
  saveRDS(gff, file=paste0(gff_file, ".granges.rds"))
}

if(!is.null(gff)){
  if(!file.exists(paste0(gff_file, '.gfeatures.txdb')))
  {  
    cat('Creating txdb object from GRanges\n')
    txdb = makeTxDbFromGRanges(gr = gff)
    cat('Saving txdb into file\n')
    saveDb(txdb, file = paste0(gff_file,'.gfeatures.txdb'))
  }else{
    cat('Txdb already exists.. Loading from ',paste0(gff_file, '.gfeatures.txdb'),'\n')
  }
}else{
  stop('imported GFF is empty!\n')
}

##Find all gene ids available in GFF and find genes that overlap with the query regions in bed file
peaks = import.bed(peak_file)
seqlevelsStyle(peaks) = 'UCSC'

all_gene_ids = na.omit(unique(gff$gene_id))
overlaps = gff[queryHits(findOverlaps(gff, peaks))]
targeted_gene_ids = na.omit(unique(overlaps$gene_id))


background_geneset = paste0(out_prefix, '.background_genes.txt')
write(x = all_gene_ids, file = background_geneset)
targeted_geneset = paste0(out_prefix, '.targeted_genes.txt')
write(x = targeted_gene_ids, file = targeted_geneset)

#use the BED file to run rcas.motif.R module
MOTIF_command = paste0(Rscript,' ',libexecdir,'/rcas.motif.R',
                       ' --peak_file=',peak_file,
                       ' --genome_version=',genome_version)

cat(MOTIF_command,'\n')
system(MOTIF_command)

#Use the gene lists to run GO term and msigdb analyses 
GO_command = paste0(Rscript,' ',libexecdir,'/rcas.GO.R',
                  ' --background_list=',background_geneset,
                  ' --targeted_list=',targeted_geneset,
                   ' --out_prefix=',out_prefix,
                   ' --species=',species)
cat(GO_command,'\n')
system(GO_command)

#Use the gene lists to run MSIGDB module
msigdb_gmt = paste0(basedir,'/c2.cp.v5.0.entrez.',genome_version,'.gmt')
MSIGDB_command = paste0(Rscript,' ',libexecdir,'/rcas.msigdb.R',
                    ' --gmt=',msigdb_gmt,
                    ' --background_list=',background_geneset,
                    ' --targeted_list=',targeted_geneset,
                    ' --out_prefix=',out_prefix,
                    ' --species=',species)
cat(MSIGDB_command,'\n')
system(MSIGDB_command)

work_dir = getwd()
report_script = paste0(libexecdir,'/rcas.Rmd')
output_filename = paste0(out_prefix, '.rcas.report.html')
css = paste0(basedir,'/custom.css')
header=paste0(basedir,'/header.html')
REPORT_command = paste0(Rscript," -e \"library('rmarkdown'); rmarkdown::render('",report_script,"',",
                          " output_file = '",output_filename,"',",
                          " intermediates_dir = '",work_dir,"',",
                          " output_dir = '",work_dir,"',",
                          " html_document(toc=TRUE, theme='cerulean', number_sections=TRUE, css='",css,"',",
                          " includes=includes(before_body='",header,"')))\"",
                          " ",work_dir," ",peak_file," ",paste0(gff_file,'.granges.rds')," ",
                          " ",paste0(gff_file,'.gfeatures.txdb'),
                          " ",paste0(out_prefix,".BP.GO.results.tsv"),
                          " ",paste0(out_prefix,".MF.GO.results.tsv"),
                          " ",paste0(out_prefix,".CC.GO.results.tsv"),
                          " ",paste0(out_prefix,".msigdb_results.tsv"),
                          " RUN",
                          " ",paste0(out_prefix,".motif.results.rds")
                        )

cat(REPORT_command,"\n")
system(REPORT_command)
